generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PLAYER
  CREATOR
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?

  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  googleId         String?   @unique
  githubId         String?   @unique
  steamId          String?   @unique
  discordId        String?   @unique
  
  totpSecret       String?
  isTotpEnabled    Boolean   @default(false)

  role             Role      @default(PLAYER)
  profile          Profile?  @relation(fields: [profileId], references: [id])
  profileId        Int?      @unique

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  news            News[]

  Creator         Creator[]

  
  followedCreators Follow_creator[] @relation("FollowedCreators")
  followers        Follow_creator[] @relation("CreatorFollowers")

  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?

  followedProjects Follow_project[]  @relation("UserFollowProjects")

  Review_project Project_review[] @relation("ReviewAuthor")

  Reviews_likes Like_review[]
  News_comment Comment_news[]
  News_likes Like_news[]
  Comments_likes Like_comment[]
}

model Profile {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  avatarUrl     String?
  bio           String?
  socialLinks   Json?
  isAnonymized  Boolean  @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User?
}

model Creator {
  ID_creator Int
  ID_project Int @unique

  user    User    @relation(fields: [ID_creator], references: [id])
  project Project @relation("ProjectCreator", fields: [ID_project], references: [id])

  @@id([ID_creator, ID_project])
  Team Team[] @relation("CreatorTeams")
}

model Follow_creator {
   @@id([ID_user, ID_creator])

  ID_user                Int
  ID_creator             Int
  createdAt              DateTime @default(now())
  notificationsEnabled   Boolean  @default(false)

  follower               User     @relation("FollowedCreators", fields: [ID_user], references: [id])
  followedCreator        User     @relation("CreatorFollowers", fields: [ID_creator], references: [id])
}

enum ProjectStatus {
  in_progress
  published
  canceled
}

model Project {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  status      ProjectStatus    @default(in_progress)

  creator     Creator?         @relation("ProjectCreator")

  news        News[]

  followers Follow_project[] @relation("ProjectFollowers")

  Review_project Project_review[] @relation("ReviewedProject")

  Team Team[]
}

model Follow_project {
  ID_user              Int
  ID_project           Int
  createdAt            DateTime @default(now())
  notificationsEnabled Boolean  @default(false)


  user     User     @relation("UserFollowProjects", fields: [ID_user], references: [id])
  project  Project  @relation("ProjectFollowers", fields: [ID_project], references: [id])

  @@id([ID_user, ID_project])
}

model Project_review {
  ID_review           Int        @id @default(autoincrement())
  ID_author           Int
  ID_project          Int
  rating              Int
  comment             String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  likeCount           Int        @default(0)

  author     User                @relation("ReviewAuthor", fields: [ID_author], references: [id])
  project    Project             @relation("ReviewedProject", fields: [ID_project], references: [id])

  likes      Like_review[]

  @@unique([ID_author, ID_project])
}

model Like_review {
  ID_user            Int
  ID_review          Int
  createdAt          DateTime @default(now())

  user     User               @relation(fields: [ID_user], references: [id])
  review   Project_review     @relation(fields: [ID_review], references: [ID_review])

  @@id([ID_user, ID_review])
}


model News {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    Int
  ID_project  Int

  author      User     @relation(fields: [authorId], references: [id])
  project     Project  @relation(fields: [ID_project], references: [id])

  likesCount  Int     @default(0)
  likes       Like_news[]


  comments Comment_news[] @relation("NewsComments")
}

model Comment_news {
  id           Int             @id @default(autoincrement())
  ID_news      Int
  ID_user      Int
  ID_parent    Int?
  content      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  news         News            @relation("NewsComments", fields: [ID_news], references: [id])
  user         User            @relation(fields: [ID_user], references: [id])

  parent       Comment_news?   @relation("CommentReplies", fields: [ID_parent], references: [id])
  replies      Comment_news[]  @relation("CommentReplies")

  likes Like_comment[]
}

model Like_news {
  ID_user      Int
  ID_news      Int
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [ID_user], references: [id])
  news         News     @relation(fields: [ID_news], references: [id])

  @@id([ID_user, ID_news])

}

model Like_comment {
  ID_user      Int
  ID_comment   Int
  createdAt    DateTime      @default(now())

  user         User          @relation(fields: [ID_user], references: [id])
  comment      Comment_news  @relation(fields: [ID_comment], references: [id])

  @@id([ID_user, ID_comment])
}

enum Team_status {
  OPEN
  CLOSED
}

model Team {
  ID_project   Int
  ID_creator  Int

  name        String
  description String?
  jobs       Json
  status      Team_status @default(OPEN)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project    @relation(fields: [ID_project], references: [id])
  creator Creator @relation("CreatorTeams", fields: [ID_creator, ID_project], references: [ID_creator, ID_project])


  @@id([ID_project, ID_creator])
}